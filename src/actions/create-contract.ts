"use server";

import { deployContract } from "@wagmi/core";

const abi = [
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "Deposit",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "fromUser", type: "address" },
      { indexed: true, internalType: "address", name: "toContract", type: "address" },
      { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "FundsForwarded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "user", type: "address" },
      { indexed: false, internalType: "uint256", name: "amount", type: "uint256" }
    ],
    name: "Withdrawal",
    type: "event"
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address payable", name: "_toContract", type: "address" },
      { internalType: "uint256", name: "_amount", type: "uint256" }
    ],
    name: "forwardFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "uint256", name: "_amount", type: "uint256" }
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
] as const;

import type { WalletClient, PublicClient } from "viem";
import type { Session } from "next-auth";

interface CreateContractParams {
  walletClient: WalletClient;
  publicClient: PublicClient;
  session: Session;
}

export async function createContract({ walletClient, publicClient, session }: CreateContractParams) {
  if (!walletClient) {
    return { error: "Wallet client not found. Please connect your wallet." };
  }
  if (!publicClient) {
    return { error: "Public client not available." };
  }

  try {
    const constructorArgs = [BigInt(100)];
   const hash = await walletClient.deployContract({
           abi: abi,
           bytecode:
             "0x6080604052348015600e575f5ffd5b50610bea8061001c5f395ff3fe60806040526004361061003e575f3560e01c806312065fe0146100425780632e1a7d4d1461006c57806392878bd014610094578063d0e30db0146100bc575b5f5ffd5b34801561004d575f5ffd5b506100566100c6565b604051610063919061064c565b60405180910390f35b348015610077575f5ffd5b50610092600480360381019061008d9190610693565b610109565b005b34801561009f575f5ffd5b506100ba60048036038101906100b59190610718565b610315565b005b6100c4610550565b005b5f5f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905090565b5f5f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f821161018b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610182906107d6565b60405180910390fd5b818110156101ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c590610864565b60405180910390fd5b81816101da91906108af565b5f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055503373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6583604051610260919061064c565b60405180910390a25f3373ffffffffffffffffffffffffffffffffffffffff168360405161028d9061090f565b5f6040518083038185875af1925050503d805f81146102c7576040519150601f19603f3d011682016040523d82523d5f602084013e6102cc565b606091505b5050905080610310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030790610993565b60405180910390fd5b505050565b5f5f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f90610864565b60405180910390fd5b5f8373ffffffffffffffffffffffffffffffffffffffff163b116103f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e890610a21565b60405180910390fd5b81816103fd91906108af565b5f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd37054e910e2653e952b17b957944aaf15ef4ed5e4fc5aedbc3f6b9327df7f388460405161049a919061064c565b60405180910390a35f8373ffffffffffffffffffffffffffffffffffffffff16836040516104c79061090f565b5f6040518083038185875af1925050503d805f8114610501576040519150601f19603f3d011682016040523d82523d5f602084013e610506565b606091505b505090508061054a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054190610ad5565b60405180910390fd5b50505050565b5f3411610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058990610b63565b60405180910390fd5b345f5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546105dd9190610b81565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3460405161062a919061064c565b60405180910390a2565b5f819050919050565b61064681610634565b82525050565b5f60208201905061065f5f83018461063d565b92915050565b5f5ffd5b61067281610634565b811461067c575f5ffd5b50565b5f8135905061068d81610669565b92915050565b5f602082840312156106a8576106a7610665565b5b5f6106b58482850161067f565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106e7826106be565b9050919050565b6106f7816106dd565b8114610701575f5ffd5b50565b5f81359050610712816106ee565b92915050565b5f5f6040838503121561072e5761072d610665565b5b5f61073b85828601610704565b925050602061074c8582860161067f565b9150509250929050565b5f82825260208201905092915050565b7f436f6e7472616374466f727761726465723a20416d6f756e74206d75737420625f8201527f652067726561746572207468616e203000000000000000000000000000000000602082015250565b5f6107c0603083610756565b91506107cb82610766565b604082019050919050565b5f6020820190508181035f8301526107ed816107b4565b9050919050565b7f436f6e7472616374466f727761726465723a20496e73756666696369656e74205f8201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b5f61084e602783610756565b9150610859826107f4565b604082019050919050565b5f6020820190508181035f83015261087b81610842565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6108b982610634565b91506108c483610634565b92508282039050818111156108dc576108db610882565b5b92915050565b5f81905092915050565b50565b5f6108fa5f836108e2565b9150610905826108ec565b5f82019050919050565b5f610919826108ef565b9150819050919050565b7f436f6e7472616374466f727761726465723a204661696c656420746f207769745f8201527f6864726177000000000000000000000000000000000000000000000000000000602082015250565b5f61097d602583610756565b915061098882610923565b604082019050919050565b5f6020820190508181035f8301526109aa81610971565b9050919050565b7f436f6e7472616374466f727761726465723a20546172676574206164647265735f8201527f73206d757374206265206120636f6e7472616374000000000000000000000000602082015250565b5f610a0b603483610756565b9150610a16826109b1565b604082019050919050565b5f6020820190508181035f830152610a38816109ff565b9050919050565b7f436f6e7472616374466f727761726465723a204661696c656420746f20666f725f8201527f776172642066756e647320746f207468652074617267657420636f6e7472616360208201527f7400000000000000000000000000000000000000000000000000000000000000604082015250565b5f610abf604183610756565b9150610aca82610a3f565b606082019050919050565b5f6020820190508181035f830152610aec81610ab3565b9050919050565b7f436f6e7472616374466f727761726465723a204465706f736974206d757374205f8201527f62652067726561746572207468616e2030000000000000000000000000000000602082015250565b5f610b4d603183610756565b9150610b5882610af3565b604082019050919050565b5f6020820190508181035f830152610b7a81610b41565b9050919050565b5f610b8b82610634565b9150610b9683610634565b9250828201905080821115610bae57610bad610882565b5b9291505056fea26469706673582212203f4c9d42abe2da556d65c9af5617bf3242e3d636e40afca1951c0369798a825e64736f6c634300081e0033", // Should be imported from confi
         });

    const receipt = await publicClient.waitForTransactionReceipt({
      hash,
      timeout: 60_000
    });

    if (!receipt.contractAddress) {
      throw new Error("Contract deployment failed - no address in receipt");
    }

    return { contractAddress: receipt.contractAddress };
  } catch (error) {
    console.error("Contract deployment error:", error);
    return { 
      error: `Failed to deploy contract: ${
        error instanceof Error ? error.message : "Unknown error"
      }`
    };
  }
}